---
- name: Load OS-specific vars.
  vars:
    params:
      files:
        - "{{ansible_distribution}}.yml"
        - "{{ansible_os_family}}.yml"
        - main.yml
      paths:
        - vars
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"

- when: ansible_os_family == 'RedHat'
  ansible.builtin.include_tasks: setup-RedHat.yml

- when: ansible_os_family == 'Debian'
  ansible.builtin.include_tasks: setup-Debian.yml

- name: Install Docker packages.
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: ansible_version.full is version_compare('2.12', '<') or ansible_os_family not in ['RedHat', 'Debian']
  ansible.builtin.package:
    name: "{{ docker_packages }}"
    state: "{{ docker_packages_state }}"

- name: Install Docker packages (with downgrade option).
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: ansible_version.full is version_compare('2.12', '>=') and ansible_os_family in ['RedHat', 'Debian']
  ansible.builtin.package:
    name: "{{ docker_packages }}"
    state: "{{ docker_packages_state }}"
    allow_downgrade: true

- name: Install docker-compose plugin.
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: docker_install_compose_plugin | bool == true and (ansible_version.full is version_compare('2.12', '<') or ansible_os_family not in ['RedHat', 'Debian'])
  ansible.builtin.package:
    name: "{{ docker_compose_package }}"
    state: "{{ docker_compose_package_state }}"

- name: Install docker-compose-plugin (with downgrade option).
  notify: restart docker
  ignore_errors: "{{ ansible_check_mode }}"
  when: docker_install_compose_plugin | bool == true and ansible_version.full is version_compare('2.12', '>=') and ansible_os_family in ['RedHat', 'Debian']
  ansible.builtin.package:
    name: "{{ docker_compose_package }}"
    state: "{{ docker_compose_package_state }}"
    allow_downgrade: true

- name: Ensure /etc/docker/ directory exists.
  when: docker_daemon_options.keys() | length > 0
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: 493

- name: Configure Docker daemon options.
  when: docker_daemon_options.keys() | length > 0
  notify: restart docker
  ansible.builtin.copy:
    content: "{{ docker_daemon_options | to_nice_json }}"
    dest: /etc/docker/daemon.json
    mode: 420

- name: Ensure Docker is started and enabled at boot.
  ignore_errors: "{{ ansible_check_mode }}"
  when: docker_service_manage | bool
  ansible.builtin.service:
    name: docker
    state: "{{ docker_service_state }}"
    enabled: "{{ docker_service_enabled }}"

- name: Ensure handlers are notified now to avoid firewall conflicts.
  ansible.builtin.meta: flush_handlers

- when: docker_install_compose | bool
  ansible.builtin.include_tasks: docker-compose.yml

- name: Get docker group info using getent.
  when: docker_users | length > 0
  ansible.builtin.getent:
    database: group
    key: docker
    split: ":"

- name: Check if there are any users to add to the docker group.
  when:
    - docker_users | length > 0
    - item not in ansible_facts.getent_group["docker"][2]
  ansible.builtin.set_fact:
    at_least_one_user_to_modify: true
  loop: "{{ docker_users |flatten(levels=1) }}"

- when: at_least_one_user_to_modify is defined
  ansible.builtin.include_tasks: docker-users.yml
